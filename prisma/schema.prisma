datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

generator client {
  provider = "prisma-client-js"
}

// model Post {
//   id        Int     @id @default(autoincrement())
//   title     String
//   content   String?
//   published Boolean @default(false)
//   author    User?   @relation(fields: [authorId], references: [id])
//   authorId  Int?
// }

// model User {
//   id    Int     @id @default(autoincrement())
//   email String  @unique
//   name  String?
//   posts Post[]
// }

model Profile {
  id        String @id @default(uuid())
  user_id   String @unique
  name      String
  image_url String @db.Text
  email     String @db.Text

  servers Server[]
  members Member[]
  channels Channel[]

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model Server {
  id          String @id @default(uuid())
  name        String
  image_url   String @db.Text
  invite_code String @db.Text

  profile_id String
  profile    Profile @relation(fields: [profile_id], references: [id], onDelete: Cascade)

  members Member[]
  channels Channel[]

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@index([profile_id])
}

enum MemberRole {
  ADMIN
  MODERATOR
  GUEST
}

model Member {
  id   String     @id @default(uuid())
  role MemberRole @default(GUEST)

  profile_id String
  profile    Profile @relation(fields: [profile_id], references: [id], onDelete: Cascade)

  server_id String
  server    Server @relation(fields: [server_id], references: [id], onDelete: Cascade)

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@index([profile_id])
  @@index([server_id])
}

enum ChannelType {
  TEXT
  AUDIO
  VIDEO
}

model Channel {
  id   String      @id @default(uuid())
  name String
  type ChannelType @default(TEXT)

  profile_id String
  profile    Profile @relation(fields: [profile_id], references: [id], onDelete: Cascade)

  server_id String
  server    Server @relation(fields: [server_id], references: [id], onDelete: Cascade)

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@index([profile_id])
  @@index([server_id])
}
